/**
 *
 * Этот класс представляет один шаг пути, сгенерированного алгоритмом поиска пути A*.
 * Путевые точки состоят из местоположения, предыдущей путевой точки на пути и некоторых значений стоимости,
 * используемых для определения наилучшего пути
 **/
public class Waypoint
{
    /** Расположение этой путевой точки **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути или <code>null</code>, если это корень поиска A*
     **/
    Waypoint prevWaypoint;

    /**
     *
     * В этом поле хранится общая предыдущая стоимость проезда от начального местоположения до этой путевой
     * точки через цепочку путевых точек. Это фактическая стоимость следования по пути; он не включает никаких оценок
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости проезда от этой путевой точки до конечного пункта назначения
     **/
    private float remainingCost;


    /**
     *
     * Построить новую путевую точку для указанного местоположения. Опционально можно указать
     * предыдущую путевую точку, или ссылка может быть <code>null</code>, чтобы указать, что путевая точка является
     * началом пути
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /**Возвращает местоположение путевой точки **/
    public Location getLocation()
    {
        return loc;
    }

    /**
     * Возвращает предыдущую путевую точку на пути или <code>null</code>, если это
     * — начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }

    /**
     *
     * Этот мутатор позволяет установить как предыдущую стоимость,
     * так и оставшуюся стоимость в одном вызове метода. Обычно эти значения в любом случае устанавливаются одновременно
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     *
     * Возвращает фактическую стоимость проезда к этой точке из начального местоположения через серию путевых
     * точек в этой цепочке
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости проезда от этой точки до конечного пункта назначения
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     *
     * Возвращает оценку общей стоимости для этой путевой точки.
     * Это включает в себя фактическую стоимость проезда до этой точки из начального местоположения,
     * а также оценку оставшейся стоимости проезда от этой точки до конечного пункта назначения
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

